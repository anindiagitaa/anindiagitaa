#include <iostream>
#include <ctime>

using namespace std;

int fibonacci_recursive(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);
}


int fibonacci_dp(int n) {
    if (n <= 1) {
        return n;
    }
    int* fib = new int[n + 1];
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    int result = fib[n];
    delete[] fib;
    return result;
}


double measure_time(int (*func)(int), int n) {
    clock_t start = clock();
    int result = func(n);
    clock_t end = clock();
    double duration = double(end - start) / CLOCKS_PER_SEC * 1000; 
    return duration;
}

int main() {
    int test_values[] = {10, 25, 30, 40, 50};
    int num_tests = sizeof(test_values) / sizeof(test_values[0]);

    cout << "n\tRekursif (ms)\tDynamic Programming (ms)" << endl;
    cout << "--------------------------------------------" << endl;

    for (int i = 0; i < num_tests; i++) {
        int n = test_values[i];
        double time_recursive = measure_time(fibonacci_recursive, n);
        double time_dp = measure_time(fibonacci_dp, n);
        cout << n << "\t" << time_recursive << "\t\t" << time_dp << endl;
    }

    return 0;
}
