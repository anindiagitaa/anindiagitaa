#include <iostream>
#include <ctime>

using namespace std;

int fibonacci_recursive(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);
}

int fibonacci_dp(int n) {
    if (n <= 1) {
        return n;
    }
    int* fib = new int[n + 1];
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    int result = fib[n];
    delete[] fib;
    return result;
}

void measure_time(int (*func)(int), int n, const string& method) {
    clock_t start = clock();
    int result = func(n);
    clock_t end = clock();
    double duration = double(end - start) / CLOCKS_PER_SEC * 1000; 
    cout << "Method: " << method << ", n=" << n << ", Fibonacci=" << result << ", Time=" << duration << " ms" << endl;
}

int main() {
    int test_values[] = {10, 20, 30, 35, 40};
    int num_tests = sizeof(test_values) / sizeof(test_values[0]);

    cout << "Rekursif:" << endl;
    for (int i = 0; i < num_tests; i++) {
        measure_time(fibonacci_recursive, test_values[i], "Rekursif");
    }

    cout << "\nDynamic Programming:" << endl;
    for (int i = 0; i < num_tests; i++) {
        measure_time(fibonacci_dp, test_values[i], "Dynamic Programming");
    }

    return 0;
}
